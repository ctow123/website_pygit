
user  Connor staff;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    multi_accept on;
}


http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

  server {
    listen 0.0.0.0:80;
    server_name thenubes.ddns.net;

    client_max_body_size 20M;

    access_log /Users/Connor/Code/website_pygit/logs/access.log;     # <- make sure to create the logs directory
    error_log /Users/Connor/Code/website_pygit/logs/error.log;       # <- you will need this file for debugging

    # adding headers to allow http to upgrade connect to websocket, etc. ... these are hop-to-hop headers aka not passed from client to proxied server so need to be
    # sent to server explicitly
    location ~ ^/(apidb.*)$ {
       proxy_pass http://127.0.0.1:8000/$1$is_args$args;         # <- let nginx pass traffic to the gunicorn server
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "upgrade";
       # making the upgrade dependent on client actually sending it in header
       # proxy_set_header Connection $connection_upgrade;
       # proxy_read_timeout directive??
       proxy_set_header Host $host;
       proxy_cache_bypass $http_upgrade;
       #try_files $uri  /index.html;
    }

    location /pics/ {
      root /Users/Connor/Code/website_pygit;  # <- let nginx serves the static contents
      try_files $uri  /favicon.ico;
   }

    location / {
       #proxy_pass http://127.0.0.1:5000/;         # <- let nginx pass traffic to the gunicorn server
       #root /build;
       #index index.html index.htm;
       try_files $uri  /index.html;
    }

    location /media/ {
        root /Users/Connor/Code/website_pygit/frontend2/public/;  # <- let nginx serves the media contents
    }


}
    include       mime.types;
    default_type  application/octet-stream;



    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
     include servers/*;
}

#######################____________NOTES____________############

# main is the log_format that access log uses
#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                  '$status $body_bytes_sent "$http_referer" '
#                  '"$http_user_agent" "$http_x_forwarded_for"';

#access_log  logs/access.log  main;
